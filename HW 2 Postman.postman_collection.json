{
	"info": {
		"_postman_id": "e51094c2-b482-42a1-950c-de7db3c5ae7a",
		"name": "HW 2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23307602"
	},
	"item": [
		{
			"name": "2. /user_info_3",
			"item": [
				{
					"name": "2.1 user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200); \r",
									"}); // 2. Статус код 200\r",
									"\r",
									"var jsonData = pm.response.json(); // 3. Спарсить response body в json.\r",
									"var resp_name = jsonData.name;\r",
									"var resp_age = jsonData.age;\r",
									"var resp_salary = jsonData.salary\r",
									"console.log(resp_name)\r",
									"\r",
									"var req = request.data; // 7. Спарсить request.\r",
									"var req_name =  \"Demas\"; \r",
									"var req_age = 25;\r",
									"var req_salary = 1000\r",
									"console.log(\"req_name =\", req.name)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Req name is resp name\", function () {\r",
									"   \r",
									"    pm.expect(resp_name).to.eql(\"Demas\");\r",
									"}); // 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"\r",
									"pm.test(\"Req age is resp age\", function () {\r",
									"   \r",
									"    pm.expect(resp_age).to.eql(\"25\");\r",
									"}); // 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"\r",
									"pm.test(\"Req salary is resp salary\", function () {\r",
									"   \r",
									"    pm.expect(resp_salary).to.eql(1000);\r",
									"}); // 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Demas",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // 1. Отправить запрос.\r",
									"\r",
									"var jsonData = pm.response.json(); // 3. Спарсить response body в json\r",
									"var resp_name = jsonData.name;\r",
									"var resp_age = jsonData.age;\r",
									"var resp_salary = jsonData.salary;\r",
									"console.log(resp_name)\r",
									"\r",
									"var req = request.data;  // 7. Спарсить request.\r",
									"var req_name =  req.name; \r",
									"var req_age = req.age;\r",
									"var req_salary = + req.salary\r",
									"console.log(\"req_name =\", req.name)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Req name is resp name\", function () {\r",
									"   \r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"}); // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"\r",
									"pm.test(\"Req age is resp age\", function () {\r",
									"   \r",
									"    pm.expect(resp_age).to.eql(req_age); // 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"});\r",
									"\r",
									"pm.test(\"Req salary is resp salary\", function () {\r",
									"   \r",
									"    pm.expect(resp_salary).to.eql(req_salary);\r",
									"}); // 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"\r",
									"var resp_family = jsonData.family\r",
									"console.log(resp_family) // 11. Вывести в консоль параметр family из response.\r",
									"var resp_salary_1_5year = jsonData.family.u_salary_1_5_year;\r",
									"console.log(resp_salary_1_5year)\r",
									"\r",
									"var req_salary_1_5_year = req.salary*4\r",
									"console.log(req_salary_1_5_year)\r",
									"\r",
									"pm.test(\"Req salary 1,5 years is resp u salary 1,5 year\", function () {\r",
									"   \r",
									"    pm.expect(resp_salary_1_5year).to.eql(req_salary_1_5_year);\r",
									"}); // 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{$randomInt}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{$randomVerb}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{$randomInt}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. /first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"}); // 2. Статус код 200\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"}); // 3. Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. /object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var resp_name = jsonData.name;\r",
							"var resp_age = jsonData.age;\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"var req_url = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"var req_name =  req_url.name; \r",
							"var req_age = req_url.age;\r",
							"var req_salary = + req_url.salary\r",
							"\r",
							"\r",
							"pm.test(\"Req name is resp name\", function () {\r",
							"   \r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"}); // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Req age is resp age\", function () {\r",
							"   \r",
							"    pm.expect(resp_age).to.eql(req_age); // 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"});\r",
							"\r",
							"pm.test(\"Req salary is resp salary\", function () {\r",
							"   \r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"}); // 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"var resp_family = jsonData.family\r",
							"console.log(resp_family) // 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"var resp_par_dog = jsonData.family.pets.dog;\r",
							"console.log(resp_par_dog) // нашел у параметра dog параметры возраста и имени и вывел в консоль\r",
							"\r",
							"pm.test(\"Dog params name\", function () {\r",
							"   \r",
							"    pm.expect(resp_par_dog).to.have.property(\"name\");\r",
							" }); // 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Dog params age\", function () {\r",
							"   \r",
							"    pm.expect(resp_par_dog).to.have.property(\"age\");\r",
							" }); // 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"var resp_dog = jsonData.family.pets.dog.name;\r",
							"var resp_dog_age = jsonData.family.pets.dog.age\r",
							"console.log(resp_dog)\r",
							"console.log(resp_dog_age)\r",
							"\r",
							"pm.test(\"Dog is name Luky\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_dog).to.eql(\"Luky\");\r",
							"}); // 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog is age 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_dog_age).to.eql(4);\r",
							"}); // 12. Проверить, что параметр age имеет значение 4."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{$randomVerb}}&age={{$randomInt}}&salary={{$randomInt}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{$randomVerb}}"
						},
						{
							"key": "age",
							"value": "{{$randomInt}}"
						},
						{
							"key": "salary",
							"value": "{{$randomInt}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. /object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var resp_name = jsonData.name;\r",
							"var resp_age = jsonData.age;\r",
							"var resp_salary = jsonData.salary[0];\r",
							"\r",
							"var req_url = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"var req_name =  req_url.name; \r",
							"var req_age = + req_url.age;\r",
							"var req_salary = + req_url.salary\r",
							"\r",
							"\r",
							"pm.test(\"Req name is resp name\", function () {\r",
							"   \r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"}); // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Req age is resp age\", function () {\r",
							"   \r",
							"    pm.expect(resp_age).to.eql(req_age); // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"});\r",
							"\r",
							"\r",
							"console.log(req_salary) // 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(resp_salary) // 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"var resp_0_salary = jsonData.salary[0];\r",
							"console.log(resp_0_salary) // 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"var resp_1_salary = jsonData.salary[1];\r",
							"console.log(resp_1_salary) // 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"var resp_2_salary = jsonData.salary[2];\r",
							"console.log(resp_2_salary) // 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"pm.test(\"Req salary is resp salary[0]\", function () {\r",
							"   \r",
							"    pm.expect(resp_0_salary).to.eql(req_salary);\r",
							"}); // 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"pm.test(\"Req salary*2 is resp salary[1]\", function () {\r",
							"   \r",
							"    pm.expect(+resp_1_salary).to.eql(req_salary*2);\r",
							"}); // 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Req salary*3 is resp salary[2]\", function () {\r",
							"   \r",
							"    pm.expect(+resp_2_salary).to.eql(req_salary*3);\r",
							"}); // 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.environment.set(\"name\", resp_name);\r",
							"pm.environment.set(\"age\", resp_age);\r",
							"pm.environment.set(\"salary\", resp_salary);\r",
							"\r",
							"const salary = jsonData.salary\r",
							"\r",
							"for (const key in salary) {\r",
							"  console.log(`${key} – ${salary[key]}`)\r",
							"} // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{$randomVerb}}&age={{$randomInt}}&salary={{$randomInt}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{$randomVerb}}"
						},
						{
							"key": "age",
							"value": "{{$randomInt}}"
						},
						{
							"key": "salary",
							"value": "{{$randomInt}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 5. Статус код 200\r",
							"\r",
							"var jsonData = pm.response.json(); // 6. Спарсить response body в json.\r",
							"var req = request.data;  // 7. Спарсить request.\r",
							"var req_salary = + req.salary\r",
							"\r",
							"\r",
							"pm.test(\"Have start qa salary\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							" }); // 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							" pm.test(\"Have qa salary after 6 months\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							" }); // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							" pm.test(\"Have qa salary after 12 months\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							" }); // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							" pm.test(\"Have qa salary after 1,5 years\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							" }); // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							" pm.test(\"Have qa salary after 3,5 years\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							" }); // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Have parametr person\", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							" }); // 13. Проверить, что json response имеет параметр person\r",
							"\r",
							" var resp_salary = jsonData.start_qa_salary;\r",
							"var req_salary = + req.salary;\r",
							"\r",
							"pm.test(\"Req salary is resp start salary\", function () {\r",
							"        pm.expect(resp_salary).to.eql(req_salary);\r",
							"}); // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"var resp_6_salary = jsonData.qa_salary_after_6_months;\r",
							"\r",
							"pm.test(\"Req salary*2 is resp 6 months salary\", function () {\r",
							"        pm.expect(resp_6_salary).to.eql(req_salary*2);\r",
							"}); // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"var resp_12_salary = jsonData.qa_salary_after_12_months;\r",
							"\r",
							"pm.test(\"Req salary*2.7 is resp 12 months salary\", function () {\r",
							"        pm.expect(resp_12_salary).to.eql(req_salary*2.7);\r",
							"}); // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"var resp_1_5_salary = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"\r",
							"pm.test(\"Req salary*3.3 is resp 1,5 years salary\", function () {\r",
							"        pm.expect(resp_1_5_salary).to.eql(req_salary*3.3);\r",
							"}); //  17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"var resp_3_5_salary = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"\r",
							"pm.test(\"Req salary*3.8 is resp 3,5 years salary\", function () {\r",
							"        pm.expect(resp_3_5_salary).to.eql(req_salary*3.8);\r",
							"}); // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"var resp_1_element = jsonData.person.u_name[1];\r",
							"pm.test(\"Resp 1 element is req salary\", function () {\r",
							"        pm.expect(resp_1_element).to.eql(req_salary);\r",
							"}); // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"var resp_u_age = jsonData.person.u_age;\r",
							"var req_age = + req.age; \r",
							"pm.test(\"Resp user age is req age\", function () {\r",
							"        pm.expect(resp_u_age).to.eql(req_age);\r",
							"});// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"var resp_5_years = jsonData.person.u_salary_5_years;\r",
							"pm.test(\"Req salary*4.2 is resp 5 years salary\", function () {\r",
							"        pm.expect(resp_5_years).to.eql(req_salary*4.2);\r",
							"}); // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"const person = jsonData.person\r",
							"\r",
							"for (const key in person) {\r",
							"  console.log(`${key} – ${person[key]}`)\r",
							"} // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}